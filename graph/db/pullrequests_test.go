// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPullrequests(t *testing.T) {
	t.Parallel()

	query := Pullrequests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPullrequestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pullrequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPullrequestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Pullrequests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pullrequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPullrequestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PullrequestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pullrequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPullrequestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PullrequestExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Pullrequest exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PullrequestExists to return true, but got false.")
	}
}

func testPullrequestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pullrequestFound, err := FindPullrequest(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pullrequestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPullrequestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Pullrequests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPullrequestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Pullrequests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPullrequestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pullrequestOne := &Pullrequest{}
	pullrequestTwo := &Pullrequest{}
	if err = randomize.Struct(seed, pullrequestOne, pullrequestDBTypes, false, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}
	if err = randomize.Struct(seed, pullrequestTwo, pullrequestDBTypes, false, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pullrequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pullrequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pullrequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPullrequestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pullrequestOne := &Pullrequest{}
	pullrequestTwo := &Pullrequest{}
	if err = randomize.Struct(seed, pullrequestOne, pullrequestDBTypes, false, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}
	if err = randomize.Struct(seed, pullrequestTwo, pullrequestDBTypes, false, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pullrequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pullrequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pullrequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pullrequestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Pullrequest) error {
	*o = Pullrequest{}
	return nil
}

func pullrequestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Pullrequest) error {
	*o = Pullrequest{}
	return nil
}

func pullrequestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Pullrequest) error {
	*o = Pullrequest{}
	return nil
}

func pullrequestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Pullrequest) error {
	*o = Pullrequest{}
	return nil
}

func pullrequestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Pullrequest) error {
	*o = Pullrequest{}
	return nil
}

func pullrequestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Pullrequest) error {
	*o = Pullrequest{}
	return nil
}

func pullrequestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Pullrequest) error {
	*o = Pullrequest{}
	return nil
}

func pullrequestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Pullrequest) error {
	*o = Pullrequest{}
	return nil
}

func pullrequestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Pullrequest) error {
	*o = Pullrequest{}
	return nil
}

func testPullrequestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Pullrequest{}
	o := &Pullrequest{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pullrequestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Pullrequest object: %s", err)
	}

	AddPullrequestHook(boil.BeforeInsertHook, pullrequestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pullrequestBeforeInsertHooks = []PullrequestHook{}

	AddPullrequestHook(boil.AfterInsertHook, pullrequestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pullrequestAfterInsertHooks = []PullrequestHook{}

	AddPullrequestHook(boil.AfterSelectHook, pullrequestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pullrequestAfterSelectHooks = []PullrequestHook{}

	AddPullrequestHook(boil.BeforeUpdateHook, pullrequestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pullrequestBeforeUpdateHooks = []PullrequestHook{}

	AddPullrequestHook(boil.AfterUpdateHook, pullrequestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pullrequestAfterUpdateHooks = []PullrequestHook{}

	AddPullrequestHook(boil.BeforeDeleteHook, pullrequestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pullrequestBeforeDeleteHooks = []PullrequestHook{}

	AddPullrequestHook(boil.AfterDeleteHook, pullrequestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pullrequestAfterDeleteHooks = []PullrequestHook{}

	AddPullrequestHook(boil.BeforeUpsertHook, pullrequestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pullrequestBeforeUpsertHooks = []PullrequestHook{}

	AddPullrequestHook(boil.AfterUpsertHook, pullrequestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pullrequestAfterUpsertHooks = []PullrequestHook{}
}

func testPullrequestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pullrequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPullrequestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pullrequestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Pullrequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPullrequestToManyProjectcards(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pullrequest
	var b, c Projectcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, projectcardDBTypes, false, projectcardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectcardDBTypes, false, projectcardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Pullrequest, a.ID)
	queries.Assign(&c.Pullrequest, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Projectcards().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Pullrequest, b.Pullrequest) {
			bFound = true
		}
		if queries.Equal(v.Pullrequest, c.Pullrequest) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PullrequestSlice{&a}
	if err = a.L.LoadProjectcards(ctx, tx, false, (*[]*Pullrequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Projectcards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Projectcards = nil
	if err = a.L.LoadProjectcards(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Projectcards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPullrequestToManyAddOpProjectcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pullrequest
	var b, c, d, e Projectcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullrequestDBTypes, false, strmangle.SetComplement(pullrequestPrimaryKeyColumns, pullrequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Projectcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, projectcardDBTypes, false, strmangle.SetComplement(projectcardPrimaryKeyColumns, projectcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Projectcard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProjectcards(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Pullrequest) {
			t.Error("foreign key was wrong value", a.ID, first.Pullrequest)
		}
		if !queries.Equal(a.ID, second.Pullrequest) {
			t.Error("foreign key was wrong value", a.ID, second.Pullrequest)
		}

		if first.R.ProjectcardPullrequest != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProjectcardPullrequest != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Projectcards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Projectcards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Projectcards().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPullrequestToManySetOpProjectcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pullrequest
	var b, c, d, e Projectcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullrequestDBTypes, false, strmangle.SetComplement(pullrequestPrimaryKeyColumns, pullrequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Projectcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, projectcardDBTypes, false, strmangle.SetComplement(projectcardPrimaryKeyColumns, projectcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProjectcards(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Projectcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProjectcards(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Projectcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Pullrequest) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Pullrequest) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Pullrequest) {
		t.Error("foreign key was wrong value", a.ID, d.Pullrequest)
	}
	if !queries.Equal(a.ID, e.Pullrequest) {
		t.Error("foreign key was wrong value", a.ID, e.Pullrequest)
	}

	if b.R.ProjectcardPullrequest != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProjectcardPullrequest != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProjectcardPullrequest != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProjectcardPullrequest != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Projectcards[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Projectcards[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPullrequestToManyRemoveOpProjectcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pullrequest
	var b, c, d, e Projectcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullrequestDBTypes, false, strmangle.SetComplement(pullrequestPrimaryKeyColumns, pullrequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Projectcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, projectcardDBTypes, false, strmangle.SetComplement(projectcardPrimaryKeyColumns, projectcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProjectcards(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Projectcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProjectcards(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Projectcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Pullrequest) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Pullrequest) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProjectcardPullrequest != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProjectcardPullrequest != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProjectcardPullrequest != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProjectcardPullrequest != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Projectcards) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Projectcards[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Projectcards[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPullrequestToOneRepositoryUsingPullrequestRepository(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Pullrequest
	var foreign Repository

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pullrequestDBTypes, false, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, repositoryDBTypes, false, repositoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Repository struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Repository = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PullrequestRepository().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddRepositoryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Repository) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PullrequestSlice{&local}
	if err = local.L.LoadPullrequestRepository(ctx, tx, false, (*[]*Pullrequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PullrequestRepository == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PullrequestRepository = nil
	if err = local.L.LoadPullrequestRepository(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PullrequestRepository == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPullrequestToOneSetOpRepositoryUsingPullrequestRepository(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Pullrequest
	var b, c Repository

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullrequestDBTypes, false, strmangle.SetComplement(pullrequestPrimaryKeyColumns, pullrequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, repositoryDBTypes, false, strmangle.SetComplement(repositoryPrimaryKeyColumns, repositoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, repositoryDBTypes, false, strmangle.SetComplement(repositoryPrimaryKeyColumns, repositoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Repository{&b, &c} {
		err = a.SetPullrequestRepository(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PullrequestRepository != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Pullrequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Repository != x.ID {
			t.Error("foreign key was wrong value", a.Repository)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Repository))
		reflect.Indirect(reflect.ValueOf(&a.Repository)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Repository != x.ID {
			t.Error("foreign key was wrong value", a.Repository, x.ID)
		}
	}
}

func testPullrequestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPullrequestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PullrequestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPullrequestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pullrequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pullrequestDBTypes = map[string]string{`ID`: `TEXT`, `BaseRefName`: `TEXT`, `Closed`: `INTEGER`, `HeadRefName`: `TEXT`, `URL`: `TEXT`, `Number`: `INTEGER`, `Repository`: `TEXT`}
	_                  = bytes.MinRead
)

func testPullrequestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pullrequestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pullrequestAllColumns) == len(pullrequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pullrequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPullrequestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pullrequestAllColumns) == len(pullrequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pullrequest{}
	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pullrequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pullrequestDBTypes, true, pullrequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pullrequestAllColumns, pullrequestPrimaryKeyColumns) {
		fields = pullrequestAllColumns
	} else {
		fields = strmangle.SetComplement(
			pullrequestAllColumns,
			pullrequestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PullrequestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPullrequestsUpsert(t *testing.T) {
	t.Parallel()
	if len(pullrequestAllColumns) == len(pullrequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Pullrequest{}
	if err = randomize.Struct(seed, &o, pullrequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pullrequest: %s", err)
	}

	count, err := Pullrequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pullrequestDBTypes, false, pullrequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pullrequest struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pullrequest: %s", err)
	}

	count, err = Pullrequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
